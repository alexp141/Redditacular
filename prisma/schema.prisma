datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   Json
  image     String?
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String

  subreddit Subreddit  @relation(fields: [subName], references: [name])
  subName   String
  votes     PostVote[]
  comments  Comment[]
}

model User {
  id        String   @id @unique
  username  String   @unique
  email     String?  @unique
  firstName String?
  lastName  String?
  createdAt DateTime @default(now())
  avatar    String?
  posts     Post[]

  createdSubreddits Subreddit[]
  subscripton       Subscription[]
  postVotes         PostVote[]
  comments          Comment[]
  commentVotes      CommentVote[]
}

model Subreddit {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String

  posts       Post[]
  subscribers Subscription[]
}

model Subscription {
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String

  @@id([userId, subredditId])
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

model PostVote {
  userId String
  user   User     @relation(fields: [userId], references: [id])
  postId Int
  post   Post     @relation(fields: [postId], references: [id])
  vote   VoteType

  @@id([userId, postId])
}

model Comment {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  author       User          @relation(fields: [userId], references: [id])
  userId       String
  post         Post          @relation(fields: [postId], references: [id])
  postId       Int
  text         String
  replyTo      Comment?      @relation("replyTo", fields: [replyToId], references: [id])
  comments     Comment[]     @relation("replyTo")
  replyToId    String?
  commentVotes CommentVote[]
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  vote      VoteType

  @@id([userId, commentId])
}
